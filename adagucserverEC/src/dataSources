CGDALDataWriter.cpp:  if(srvParam->sourceImages[0].count>1){
CGDALDataWriter.cpp:  if(srvParam->Geo->CRS.indexOf("PROJ4:")==0){
CGDALDataWriter.cpp:    CT::string temp(srvParam->Geo->CRS.c_str()+6);
CGDALDataWriter.cpp:    srvParam->Geo->CRS.copy(&temp);
CGDALDataWriter.cpp:  CDataSource *sourceImage=&srvParam->sourceImages[0];
CGDALDataWriter.cpp:  if(srvParam->WCS_GoNative==1){
CGDALDataWriter.cpp:    for(int j=0;j<4;j++)dfSrcBBOX[j]=srvParam->sourceImages[0].dfBBOX[j];
CGDALDataWriter.cpp:    srvParam->Geo->dWidth=sourceImage->dWidth;
CGDALDataWriter.cpp:    srvParam->Geo->dHeight=sourceImage->dHeight;
CGDALDataWriter.cpp:    srvParam->Geo->CRS.copy(&sourceImage->CRS);
CGDALDataWriter.cpp:    if(srvParam->Format.length()==0)srvParam->Format.copy("NetCDF4");
CGDALDataWriter.cpp:    for(int j=0;j<4;j++)dfSrcBBOX[j]=srvParam->sourceImages[0].dfBBOX[j];
CGDALDataWriter.cpp:    for(int j=0;j<4;j++)dfDstBBOX[j]=srvParam->Geo->dfBBOX[j];
CGDALDataWriter.cpp:    if(srvParam->dWCS_RES_OR_WH==1){
CGDALDataWriter.cpp:      srvParam->Geo->dWidth=int(((dfDstBBOX[2]-dfDstBBOX[0])/srvParam->dfResX));
CGDALDataWriter.cpp:      srvParam->Geo->dHeight=int(((dfDstBBOX[1]-dfDstBBOX[3])/srvParam->dfResY));
CGDALDataWriter.cpp:      srvParam->Geo->dHeight=abs(srvParam->Geo->dHeight);
CGDALDataWriter.cpp:    if(srvParam->Geo->dWidth>20000||srvParam->Geo->dHeight>20000){
CGDALDataWriter.cpp:  adfDstGeoTransform[1]=(dfDstBBOX[2]-dfDstBBOX[0])/double(srvParam->Geo->dWidth);
CGDALDataWriter.cpp:  adfDstGeoTransform[5]=(dfDstBBOX[1]-dfDstBBOX[3])/double(srvParam->Geo->dHeight);
CGDALDataWriter.cpp:  for(int j=0;j<srvParam->configReader->dNrWCSFormats;j++){
CGDALDataWriter.cpp:    if(srvParam->Format.match(&srvParam->configReader->WCSFormats_Name[j])==0){
CGDALDataWriter.cpp:      driverName.copy(&srvParam->configReader->WCSFormats_Driver[j]);
CGDALDataWriter.cpp:      mimeType.copy(&srvParam->configReader->WCSFormats_MimeType[j]);
CGDALDataWriter.cpp:      customOptions.copy(&srvParam->configReader->WCSFormats_Options[j]);
CGDALDataWriter.cpp:  srvParam->Format.toUpperCase();
CGDALDataWriter.cpp:  if(srvParam->Format.match("GEOTIFF")==0){
CGDALDataWriter.cpp:  if(srvParam->Format.match("AAIGRID")==0){
CGDALDataWriter.cpp:      CDBError("This WCS format ('%s') does not support multiple bands. Select a single image, or choose an other format.",srvParam->Format.c_str());
CGDALDataWriter.cpp:    CDBError("Unknown format %s",srvParam->Format.c_str());
CGDALDataWriter.cpp:  tmpFileName.copy(&srvParam->configReader->TempPath);
CGDALDataWriter.cpp:  imageWarper.decodeCRS(&srvParam->Geo->CRS);
CGDALDataWriter.cpp:  if(oSRS.SetFromUserInput(srvParam->Geo->CRS.c_str())!=OGRERR_NONE){
CGDALDataWriter.cpp:    CDBError("WCS: Invalid destination projection: [%s]",srvParam->Geo->CRS.c_str());
CGDALDataWriter.cpp:  hMemDS1 = GDALCreate( hMemDriver1,"memory_dataset_1",srvParam->Geo->dWidth,srvParam->Geo->dHeight,NrOfBands,eDT,NULL );
CGDALDataWriter.cpp:      snprintf(szTemp2,MAX_STR_LEN,"%s",srvParam->sourceImages[0].VariableName.c_str());
CGDALDataWriter.cpp:  strncpy(pszTempFileName+0,srvParam->Format.c_str(),8);
CGDALDataWriter.cpp:  for(int j=srvParam->Format.length();j<8;j++)pszTempFileName[j]='_';
CGDALDataWriter.cpp:  strncpy(pszTempFileName+offset,srvParam->sourceImages[0].VariableName.c_str(),10);
CGDALDataWriter.cpp:  for(int j=srvParam->sourceImages[0].VariableName.length()+offset;j<offset+10;j++)pszTempFileName[j]='_';
CGDALDataWriter.cpp:  snprintf(szTemp,MAX_STR_LEN,"%f",srvParam->Geo->dfBBOX[0]);
CGDALDataWriter.cpp:  snprintf(szTemp,MAX_STR_LEN,"%f",srvParam->Geo->dfBBOX[1]);
CGDALDataWriter.cpp:  snprintf(szTemp,MAX_STR_LEN,"%f",srvParam->Geo->dfBBOX[2]);
CGDALDataWriter.cpp:  snprintf(szTemp,MAX_STR_LEN,"%f",srvParam->Geo->dfBBOX[3]);
CGDALDataWriter.cpp:  snprintf(szTemp,MAX_STR_LEN,"%d",srvParam->Geo->dWidth);
CGDALDataWriter.cpp:  snprintf(szTemp,MAX_STR_LEN,"%d",srvParam->Geo->dHeight);
CGDALDataWriter.cpp:  snprintf(szTemp,MAX_STR_LEN,"%f",srvParam->dfResX);
CGDALDataWriter.cpp:  snprintf(szTemp,MAX_STR_LEN,"%f",srvParam->dfResY);
CGDALDataWriter.cpp:  tmp.copy(srvParam->configReader->XMLConfigName.c_str()+srvParam->configReader->XMLConfigName.lastIndexOf("/"));
CGDALDataWriter.cpp:  for(int i=0;i<srvParam->sourceImages[0].dOGCNumDIMS&&i<4;i++){
CGDALDataWriter.cpp:    snprintf(szTemp,MAX_STR_LEN,"%d",srvParam->sourceImages[0].dOGCDimValues[i]);
CGDALDataWriter.cpp:  snprintf(szTemp,MAX_STR_LEN,"%s",srvParam->Geo->CRS.c_str());
CImageDataWriter.cpp:  requestType=srvParam->requestType;
CImageDataWriter.cpp:    status = drawImage.createImage(srvParam->Geo);
CImageDataWriter.cpp:    drawImage.Geo->copy(srvParam->Geo);
CImageDataWriter.cpp:  if(srvParam->requestType==REQUEST_WMS_GETMAP||srvParam->requestType==REQUEST_WMS_GETLEGENDGRAPHIC){
CImageDataWriter.cpp:    for(size_t j=0;j<srvParam->cfg->Legend.size()&&dFoundPalette==-1;j++){
CImageDataWriter.cpp:      if(srvParam->dataSources[0].cfgLayer->Legend[0]->value.equals(
CImageDataWriter.cpp:         srvParam->cfg->Legend[j]->attr.name.c_str())){
CImageDataWriter.cpp:      CDBError("Palette %s not found",srvParam->dataSources[0].cfgLayer->Legend[0]->attr.name.c_str());
CImageDataWriter.cpp:    status = drawImage.createGDPalette(srvParam->cfg->Legend[dFoundPalette]);
CImageDataWriter.cpp:      CDBError("Unknown palette type for %s",srvParam->cfg->Legend[dFoundPalette]->attr.name.c_str());
CImageWarper.cpp:    std::vector <CServerConfig::XMLE_Projection*> *prj=&srvParam->cfg->Projection;
CRequest.cpp:  srvParam->configObj->parseFile(pszConfigFile);
CRequest.cpp:  srvParam->cfg=srvParam->configObj->Configuration[0];
CRequest.cpp:  if(srvParam->WMSLayers!=NULL)
CRequest.cpp:    for(int j=0;j<srvParam->WMSLayers->count;j++){
CRequest.cpp:      CDBDebug("WMS GETLEGENDGRAPHIC %s",srvParam->WMSLayers[j].c_str());
CRequest.cpp:  if(srvParam->WMSLayers!=NULL)
CRequest.cpp:    for(int j=0;j<srvParam->WMSLayers->count;j++){
CRequest.cpp:      CDBDebug("WMS GETFEATUREINFO %s",srvParam->WMSLayers[j].c_str());
CRequest.cpp:  if(srvParam->WMSLayers!=NULL)
CRequest.cpp:    for(int j=0;j<srvParam->WMSLayers->count;j++){      
CRequest.cpp:      CDBDebug("WCS GETCOVERAGE %s",srvParam->WMSLayers[j].c_str());
CRequest.cpp:  if(srvParam->WMSLayers!=NULL)
CRequest.cpp:    for(int j=0;j<srvParam->WMSLayers->count;j++){
CRequest.cpp:      CDBDebug("WMS GETMAP %s",srvParam->WMSLayers[j].c_str());
CRequest.cpp:  if(srvParam->WMSLayers==NULL){
CRequest.cpp:    if(srvParam->requestType==REQUEST_WCS_DESCRIBECOVERAGE){
CRequest.cpp:      srvParam->requestType=REQUEST_WCS_DESCRIBECOVERAGE;
CRequest.cpp:      srvParam->WMSLayers = new CT::string[srvParam->cfg->Layer.size()];
CRequest.cpp:      for(size_t j=0;j<srvParam->cfg->Layer.size();j++){
CRequest.cpp:        srvParam->WMSLayers[j].copy(srvParam->cfg->Layer[j]->Name[0]->value.c_str());
CRequest.cpp:        srvParam->WMSLayers[j].count=srvParam->cfg->Layer.size();
CRequest.cpp:    if(srvParam->WMSLayers->count==0){
CRequest.cpp:    dataSources = new CDataSource[srvParam->WMSLayers->count];
CRequest.cpp:    for(int j=0;j<srvParam->WMSLayers->count;j++){
CRequest.cpp:      srvParam->dataSources[j].setLayerName(srvParam->WMSLayers[j].c_str());
CRequest.cpp:      srvParam->dataSources[j].count=srvParam->WMSLayers->count;
CRequest.cpp:    for(size_t layerNo=0;layerNo<srvParam->cfg->Layer.size();layerNo++){
CRequest.cpp:      for(int j=0;j<srvParam->WMSLayers->count;j++){
CRequest.cpp:        if(srvParam->cfg->Layer[layerNo]->Name[0]->value.equals(srvParam->dataSources[j].layerName.c_str())){
CRequest.cpp:          srvParam->dataSources[j].setCFGLayer(srvParam->cfg->Layer[layerNo]);
CRequest.cpp:  if(srvParam->serviceType==SERVICE_WMS){
CRequest.cpp:    if(srvParam->Geo->dWidth>3000){
CRequest.cpp:    if(srvParam->Geo->dHeight>3000){
CRequest.cpp:  for(int j=0;j<srvParam->WMSLayers->count;j++){
CRequest.cpp:    if(srvParam->dataSources[j].configured==0){
CRequest.cpp:      CDBError("Layer [%s] not found",srvParam->WMSLayers[j].c_str());
CRequest.cpp:  if(srvParam->serviceType==SERVICE_WCS){
CRequest.cpp:    if(srvParam->requestType==REQUEST_WCS_DESCRIBECOVERAGE){
CRequest.cpp:      for(int j=0;j<srvParam->WMSLayers->count;j++){
CRequest.cpp:        CDBDebug("WCS_DESCRIBECOVERAGE %s",srvParam->WMSLayers[j].c_str());
CRequest.cpp:  for(int j=0;j<srvParam->WMSLayers->count;j++){
CRequest.cpp:    if(srvParam->dataSources[j].dLayerType==CConfigReaderLayerTypeFile){/*
CRequest.cpp:      if(srvParam->dataSources[j].FileName.c_str()[0]!='/'){
CRequest.cpp:        pathFileName.copy(srvParam->configReader->BasePath.c_str(),srvParam->configReader->BasePath.length());
CRequest.cpp:      pathFileName.concat(srvParam->dataSources[j].FileName.c_str(),srvParam->dataSources[j].FileName.length());
CRequest.cpp:      srvParam->dataSources[j].FileName.copy(pathFileName.c_str(),pathFileName.length());
CRequest.cpp:      if(srvParam->requestType==REQUEST_WCS_GETCOVERAGE){
CRequest.cpp:        status = GDALDataWriter.addData(&srvParam->dataSources[j]);if(status != 0)return 1;
CRequest.cpp:      if(srvParam->requestType==REQUEST_WMS_GETMAP){
CRequest.cpp:        status = ImageDataWriter.addData(&srvParam->dataSources[j]);if(status != 0)return 1;
CRequest.cpp:      if(srvParam->requestType==REQUEST_WMS_GETLEGENDGRAPHIC){
CRequest.cpp:        status = ImageDataWriter.createLegend(&srvParam->dataSources[j]);if(status != 0)return 1;
CRequest.cpp:      if(srvParam->requestType==REQUEST_WMS_GETFEATUREINFO){
CRequest.cpp:        status = ImageDataWriter.getFeatureInfo(&srvParam->dataSources[j],srvParam->dX,srvParam->dY);
CRequest.cpp:    if(srvParam->dataSources[j].dLayerType==CConfigReaderLayerTypeDataBase){
CRequest.cpp:        status = DB.connect(srvParam->cfg->DataBase[0]->attr.parameters.c_str());if(status!=0)return 1;
CRequest.cpp:        for(int k=0;k<srvParam->NumOGCDims;k++)srvParam->OGCDims[k].Name.toLowerCase();
CRequest.cpp:        for(int i=0;i<srvParam->dataSources[j].dOGCNumDIMS;i++){
CRequest.cpp:          srvParam->dataSources[j].OGCDimNames[i].toLowerCase();
CRequest.cpp:          for(int k=0;k<srvParam->NumOGCDims;k++){
CRequest.cpp:            if(srvParam->OGCDims[k].Name.match(&srvParam->dataSources[j].OGCDimNames[i])==0){
CRequest.cpp:              if(srvParam->OGCDims[k].Value.match("current")==0){
CRequest.cpp:                         srvParam->dataSources[j].OGCDimNames[i].c_str(),
CRequest.cpp:                         srvParam->dataSources[j].cfgLayer->DataBaseTable[0]->value.c_str());
CRequest.cpp:                srvParam->OGCDims[k].Value.copy(&temp[0]);
CRequest.cpp:        for(int i=0;i<srvParam->dataSources[j].dOGCNumDIMS;i++){
CRequest.cpp:            srvParam->OGCDims[srvParam->NumOGCDims].Name.copy(&srvParam->dataSources[j].OGCDimNames[i]);
CRequest.cpp:                     srvParam->dataSources[j].OGCDimNames[i].c_str(),
CRequest.cpp:                     srvParam->dataSources[j].cfgLayer->DataBaseTable[0]->value.c_str());
CRequest.cpp:            srvParam->OGCDims[srvParam->NumOGCDims].Value.copy(&temp[0]);
CRequest.cpp:            srvParam->NumOGCDims++;
CRequest.cpp:        snprintf(szTemp,MAX_STR_LEN,"select path,dimtime,time from %s where ",srvParam->dataSources[j].cfgLayer->DataBaseTable[0]->value.c_str());
CRequest.cpp:        if(srvParam->NumOGCDims>0){
CRequest.cpp:          for(int i=0;i<srvParam->NumOGCDims;i++){
CRequest.cpp:            CT::string time(&srvParam->OGCDims[i].Value);
CRequest.cpp:                  snprintf(szPartialQuery,MAX_STR_LEN,"%s = '%s' ",srvParam->OGCDims[i].Name.c_str(),sDims[l].c_str());
CRequest.cpp:                  if(l==0)snprintf(szPartialQuery,MAX_STR_LEN,"%s >= '%s' ",srvParam->OGCDims[i].Name.c_str(),sDims[l].c_str());
CRequest.cpp:                  if(l==1)snprintf(szPartialQuery,MAX_STR_LEN,"%s <= '%s' ",srvParam->OGCDims[i].Name.c_str(),sDims[l].c_str());
CRequest.cpp:            srvParam->dataSources[j].OGCDimNames[i].copy(srvParam->OGCDims[i].Name.c_str(),srvParam->OGCDims[i].Name.length());
CRequest.cpp:          srvParam->dataSources[j].FileName.copy(&values_path[0]);
CRequest.cpp:          srvParam->dataSources[j].dOGCDimValues[0]=atoi(values_dim[0].c_str());
CRequest.cpp:            if(srvParam->requestType==REQUEST_WMS_GETMAP){
CRequest.cpp:                srvParam->dataSources[j].FileName.copy(&values_path[k]);
CRequest.cpp:                srvParam->dataSources[j].dOGCDimValues[0]=atoi(values_dim[k].c_str());
CRequest.cpp:                status = ImageDataWriter.addData(&srvParam->dataSources[j]);if(status != 0)throw(__LINE__);
CRequest.cpp:            if(srvParam->requestType==REQUEST_WCS_GETCOVERAGE){
CRequest.cpp:                srvParam->dataSources[j].FileName.copy(&values_path[k]);
CRequest.cpp:                srvParam->dataSources[j].dOGCDimValues[0]=atoi(values_dim[k].c_str());
CRequest.cpp:                status = GDALDataWriter.addData(&srvParam->dataSources[j]);if(status != 0)throw(__LINE__);
CRequest.cpp:            if(srvParam->requestType==REQUEST_WMS_GETFEATUREINFO){
CRequest.cpp:                srvParam->dataSources[j].FileName.copy(&values_path[k]);
CRequest.cpp:                srvParam->dataSources[j].dOGCDimValues[0]=atoi(values_dim[k].c_str());
CRequest.cpp:                status = ImageDataWriter.getFeatureInfo(&srvParam->dataSources[j],
CRequest.cpp:                    srvParam->dX,
CRequest.cpp:                    srvParam->dY);
CRequest.cpp:            if(srvParam->requestType==REQUEST_WMS_GETLEGENDGRAPHIC){
CRequest.cpp:              status = ImageDataWriter.createLegend(&srvParam->dataSources[j]);if(status != 0)throw(__LINE__);
CRequest.cpp:  //if(srvParam->requestType==REQUEST_WCS_GETCOVERAGE||srvParam->requestType==REQUEST_WMS_GETFEATUREINFO){
CRequest.cpp:  /*if(srvParam->requestType==REQUEST_WMS_GETLEGENDGRAPHIC){
CRequest.cpp:        srvParam->Styles.copy(&values[1]);
CRequest.cpp:            srvParam->Geo->dfBBOX[j]=atof(bboxvalues[j].c_str()); 
CRequest.cpp:        srvParam->Geo->dWidth=atoi(values[1].c_str());
CRequest.cpp:        if(srvParam->Geo->dWidth<1){
CRequest.cpp:        srvParam->Geo->dHeight=atoi(values[1].c_str());
CRequest.cpp:        if(srvParam->Geo->dHeight<1){
CRequest.cpp:        srvParam->dfResX=atof(values[1].c_str());
CRequest.cpp:        if(srvParam->dfResX==0){
CRequest.cpp:        srvParam->dfResY=atof(values[1].c_str());
CRequest.cpp:        if(srvParam->dfResY==0){
CRequest.cpp:        srvParam->dX=atoi(values[1].c_str());
CRequest.cpp:        srvParam->dY=atoi(values[1].c_str());
CRequest.cpp:          srvParam->Geo->CRS.copy(parameters[j].c_str()+4);
CRequest.cpp:          srvParam->Geo->CRS.copy(parameters[j].c_str()+4);
CRequest.cpp:          srvParam->Geo->CRS.decodeURL();
CRequest.cpp:        srvParam->OGCDims[srvParam->NumOGCDims].Name.copy("time");
CRequest.cpp:        srvParam->OGCDims[srvParam->NumOGCDims].Value.copy(&values[1]);
CRequest.cpp:        srvParam->NumOGCDims++;
CRequest.cpp:        srvParam->OGCDims[srvParam->NumOGCDims].Name.copy("elevation");
CRequest.cpp:        srvParam->OGCDims[srvParam->NumOGCDims].Value.copy(&values[1]);
CRequest.cpp:        srvParam->NumOGCDims++;
CRequest.cpp:            srvParam->Format.copy(&values[1]);
CRequest.cpp:        if(srvParam->WMSLayers!=NULL)
CRequest.cpp:          delete[] srvParam->WMSLayers;
CRequest.cpp:          srvParam->WMSLayers = values[1].split(",");
CRequest.cpp:        if(srvParam->WMSLayers!=NULL)
CRequest.cpp:          delete[] srvParam->WMSLayers;
CRequest.cpp:          srvParam->WMSLayers = values[1].split(",");
CRequest.cpp:          if(srvParam->WMSLayers->count>1){
CRequest.cpp:        if(srvParam->WMSLayers!=NULL)
CRequest.cpp:          delete[] srvParam->WMSLayers;
CRequest.cpp:          srvParam->WMSLayers = values[1].split(",");
CRequest.cpp:          if(srvParam->WMSLayers->count>1){
CRequest.cpp:        if(srvParam->WMSLayers!=NULL){
CRequest.cpp:          srvParam->WMSLayers = values[1].split(",");
CRequest.cpp:  if(SERVICE.match("WMS")==0)srvParam->serviceType=SERVICE_WMS;
CRequest.cpp:  if(SERVICE.match("WCS")==0)srvParam->serviceType=SERVICE_WCS;
CRequest.cpp:  if(dErrorOccured==0&&srvParam->serviceType==SERVICE_WMS){
CRequest.cpp:    srvParam->OGCVersion=WMS_VERSION_1_1_1;
CRequest.cpp:      if(REQUEST.match("GETCAPABILITIES")==0)srvParam->requestType=REQUEST_WMS_GETCAPABILITIES;
CRequest.cpp:      if(REQUEST.match("GETMAP")==0)srvParam->requestType=REQUEST_WMS_GETMAP;
CRequest.cpp:      if(REQUEST.match("GETFEATUREINFO")==0)srvParam->requestType=REQUEST_WMS_GETFEATUREINFO;
CRequest.cpp:      if(REQUEST.match("GETLEGENDGRAPHIC")==0)srvParam->requestType=REQUEST_WMS_GETLEGENDGRAPHIC;
CRequest.cpp:      srvParam->OGCVersion=-1;
CRequest.cpp:      if(Version.match("1.0.0")==0)srvParam->OGCVersion=WMS_VERSION_1_0_0;
CRequest.cpp:      if(Version.match("1.1.1")==0)srvParam->OGCVersion=WMS_VERSION_1_1_1;
CRequest.cpp:      if(srvParam->OGCVersion==-1){
CRequest.cpp:    if(srvParam->OGCVersion==WMS_VERSION_1_0_0){
CRequest.cpp:      if(srvParam->requestType==REQUEST_WMS_GETMAP)seterrormode(WMS_EXCEPTIONS_IMAGE);
CRequest.cpp:      if(srvParam->requestType==REQUEST_WMS_GETLEGENDGRAPHIC)seterrormode(WMS_EXCEPTIONS_IMAGE);
CRequest.cpp:    if(srvParam->OGCVersion==WMS_VERSION_1_1_1)seterrormode(WMS_EXCEPTIONS_XML_1_1_1);
CRequest.cpp:        if(srvParam->OGCVersion==WMS_VERSION_1_1_1)seterrormode(WMS_EXCEPTIONS_XML_1_1_1);
CRequest.cpp:    if(dErrorOccured==0&&(srvParam->requestType==REQUEST_WMS_GETMAP||srvParam->requestType==REQUEST_WMS_GETFEATUREINFO)){
CRequest.cpp:      if(srvParam->requestType==REQUEST_WMS_GETFEATUREINFO){
CRequest.cpp:      if(dFound_Styles==0&&srvParam->requestType==REQUEST_WMS_GETMAP){
CRequest.cpp:        if(srvParam->OGCVersion==WMS_VERSION_1_1_1){
CRequest.cpp:      if(srvParam->requestType==REQUEST_WMS_GETMAP){
CRequest.cpp:        if(srvParam->requestType==REQUEST_WMS_GETMAP){
CRequest.cpp:        if(srvParam->requestType==REQUEST_WMS_GETFEATUREINFO){
CRequest.cpp:    if(dErrorOccured==0&&srvParam->requestType==REQUEST_WMS_GETLEGENDGRAPHIC){
CRequest.cpp:    if(dErrorOccured==0&&srvParam->requestType==REQUEST_WMS_GETCAPABILITIES){
CRequest.cpp:  if(dErrorOccured==0&&srvParam->serviceType==SERVICE_WCS){
CRequest.cpp:      if(REQUEST.match("GETCAPABILITIES")==0)srvParam->requestType=REQUEST_WCS_GETCAPABILITIES;
CRequest.cpp:      if(REQUEST.match("DESCRIBECOVERAGE")==0)srvParam->requestType=REQUEST_WCS_DESCRIBECOVERAGE;
CRequest.cpp:      if(REQUEST.match("GETCOVERAGE")==0)srvParam->requestType=REQUEST_WCS_GETCOVERAGE;
CRequest.cpp:    if(dErrorOccured==0&&srvParam->requestType==REQUEST_WCS_DESCRIBECOVERAGE){
CRequest.cpp:    if(dErrorOccured==0&&srvParam->requestType==REQUEST_WCS_GETCOVERAGE){
CRequest.cpp:      if(dFound_Width==0&&dFound_Height==0&&dFound_RESX==0&&dFound_RESY==0&&dFound_BBOX==0&&dFound_CRS==0)srvParam->WCS_GoNative=1;else{
CRequest.cpp:        srvParam->WCS_GoNative = 0;
CRequest.cpp:          srvParam->dWCS_RES_OR_WH = 0;
CRequest.cpp:          srvParam->dWCS_RES_OR_WH = 1;
CRequest.cpp:    if(dErrorOccured==0&&srvParam->requestType==REQUEST_WCS_GETCAPABILITIES){
CRequest.cpp:  size_t numberOfLayers = srvParam->cfg->Layer.size();
CRequest.cpp:  srvParam->dataSources = new CDataSource[numberOfLayers];
CRequest.cpp:    srvParam->dataSources[layerNo].setCFGLayer(srvParam->cfg->Layer[layerNo]);
CRequest.cpp:  srvParam->requestType=REQUEST_UPDATEDB;
CRequest.cpp:    if(srvParam->dataSources[j].dLayerType==CConfigReaderLayerTypeDataBase){
CRequest.cpp:        if(tablesdone[i].match(srvParam->dataSources[j].cfgLayer->DataBaseTable[0]->value.c_str())==0){found=1;break;}
CRequest.cpp:        status = reader.updatedb(srvParam->cfg->DataBase[0]->attr.parameters.c_str(),&srvParam->dataSources[j],tailPath,layerPathToScan);
CRequest.cpp:        if(status !=0){CDBError("Could not update db for: %s",srvParam->dataSources[j].cfgLayer->Name[0]->value.c_str());return 1;}
CRequest.cpp:        tablesdone[nrtablesdone].copy(srvParam->dataSources[j].cfgLayer->DataBaseTable[0]->value.c_str());
CXMLGen.cpp:  if(srvParam->requestType==REQUEST_WMS_GETCAPABILITIES){
CXMLGen.cpp:    if(srvParam->OGCVersion==WMS_VERSION_1_0_0){
CXMLGen.cpp:      status=header.     open(srvParam->cfg->Path[0]->attr.value.c_str(),WMS_1_0_0_HEADERFILE);if(status!=0)return 1;
CXMLGen.cpp:      status=layerheader.open(srvParam->cfg->Path[0]->attr.value.c_str(),WMS_1_0_0_LAYERHEADERFILE);if(status!=0)return 1;
CXMLGen.cpp:      status=layerfooter.open(srvParam->cfg->Path[0]->attr.value.c_str(),WMS_1_0_0_LAYERFOOTERFILE);if(status!=0)return 1;
CXMLGen.cpp:    if(srvParam->OGCVersion==WMS_VERSION_1_1_1){
CXMLGen.cpp:      status=header.     open(srvParam->cfg->Path[0]->attr.value.c_str(),WMS_1_1_1_HEADERFILE);if(status!=0)return 1;
CXMLGen.cpp:      status=layerheader.open(srvParam->cfg->Path[0]->attr.value.c_str(),WMS_1_1_1_LAYERHEADERFILE);if(status!=0)return 1;
CXMLGen.cpp:      status=layerfooter.open(srvParam->cfg->Path[0]->attr.value.c_str(),WMS_1_1_1_LAYERFOOTERFILE);if(status!=0)return 1;
CXMLGen.cpp:  if(srvParam->requestType==REQUEST_WCS_GETCAPABILITIES){
CXMLGen.cpp:    status=header.     open(srvParam->cfg->Path[0]->attr.value.c_str(),WCS_1_0_HEADERFILE);if(status!=0)return 1;
CXMLGen.cpp:  if(srvParam->requestType==REQUEST_WCS_DESCRIBECOVERAGE){
CXMLGen.cpp:  CT::string OnlineResource(srvParam->cfg->OnlineResource[0]->attr.value.c_str());
CXMLGen.cpp:  if(srvParam->serviceType==SERVICE_WMS)OnlineResource.concat("&amp;SERVICE=WMS&amp;");
CXMLGen.cpp:  if(srvParam->serviceType==SERVICE_WCS)OnlineResource.concat("&amp;SERVICE=WCS&amp;");
CXMLGen.cpp:  if(srvParam->requestType==REQUEST_WMS_GETCAPABILITIES||
CXMLGen.cpp:     srvParam->requestType==REQUEST_WCS_GETCAPABILITIES)
CXMLGen.cpp:    if(srvParam->requestType==REQUEST_WMS_GETCAPABILITIES){
CXMLGen.cpp:      replace("[SERVICETITLE]",srvParam->cfg->WMS[0]->Title[0]->value.c_str(),temp);
CXMLGen.cpp:      replace("[SERVICEABSTRACT]",srvParam->cfg->WMS[0]->Abstract[0]->value.c_str(),temp);
CXMLGen.cpp:      replace("[GLOBALLAYERNAME]",srvParam->cfg->WMS[0]->RootLayer[0]->Name[0]->value.c_str(),temp);
CXMLGen.cpp:      replace("[GLOBALLAYERTITLE]",srvParam->cfg->WMS[0]->RootLayer[0]->Title[0]->value.c_str(),temp);
CXMLGen.cpp:      replace("[GLOBALLAYERABSTRACT]",srvParam->cfg->WMS[0]->RootLayer[0]->Abstract[0]->value.c_str(),temp);
CXMLGen.cpp:      if(srvParam->cfg->WMS[0]->RootLayer[0]->Abstract.size()>0){
CXMLGen.cpp:        if(srvParam->cfg->WMS[0]->RootLayer[0]->Abstract[0]->value.c_str()!=NULL){
CXMLGen.cpp:        OGCDoc.concat(srvParam->cfg->WMS[0]->RootLayer[0]->Abstract[0]->value.c_str());
CXMLGen.cpp:    if(srvParam->requestType==REQUEST_WCS_GETCAPABILITIES){
CXMLGen.cpp:      replace("[SERVICENAME]",srvParam->cfg->WCS[0]->Title[0]->value.c_str(),temp);
CXMLGen.cpp:      replace("[SERVICETITLE]",srvParam->cfg->WCS[0]->Name[0]->value.c_str(),temp);
CXMLGen.cpp:      replace("[SERVICEABSTRACT]",srvParam->cfg->WCS[0]->Abstract[0]->value.c_str(),temp);
CXMLGen.cpp:    if(srvParam->serviceType==SERVICE_WMS){
CXMLGen.cpp:  for(size_t j=0;j<srvParam->cfg->Layer.size();j++){
CXMLGen.cpp:    //CDataSource * sourceImage=&srvParam->configReader->sourceImages[j];
CXMLGen.cpp:    if(srvParam->requestType==REQUEST_WMS_GETCAPABILITIES){
CXMLGen.cpp:      if(srvParam->cfg->Layer[j]->Group.size()>0){
CXMLGen.cpp:        if(srvParam->cfg->Layer[j]->Group[0]->attr.value.c_str()!=NULL){
CXMLGen.cpp:          layerGroup.copy(srvParam->cfg->Layer[j]->Group[0]->attr.value.c_str());
CXMLGen.cpp:        if(j==srvParam->cfg->Layer.size()-1){
CXMLGen.cpp:      replace("[NAME]",srvParam->cfg->Layer[j]->Name[0]->value.c_str(),temp);
CXMLGen.cpp:      replace("[TITLE]",srvParam->cfg->Layer[j]->Title[0]->value.c_str(),temp);
CXMLGen.cpp:      replace("[ONLINERESOURCE]",srvParam->cfg->OnlineResource[0]->attr.value.c_str(),temp);
CXMLGen.cpp:      /*if(srvParam->cfg->Layer[j]->Abstract[0]!=NULL){
CXMLGen.cpp:        OGCDoc.concat(srvParam->cfg->Layer[j]->Abstract[0].value.c_str());
CXMLGen.cpp:    if(srvParam->cfg->Layer[j]->attr.type.equals("database")){
CXMLGen.cpp:      status = DB.connect(srvParam->cfg->DataBase[0]->attr.parameters.c_str());if(status!=0)return 1;
CXMLGen.cpp:               srvParam->cfg->Layer[j]->DataBaseTable[0]->value.c_str());
CXMLGen.cpp:    if(srvParam->cfg->Layer[j]->attr.type.equals("file")){
CXMLGen.cpp:        pathFileName.copy(srvParam->cfg->Path[0]->attr.value.c_str());
CXMLGen.cpp:    dataSource->setCFGLayer(srvParam->cfg->Layer[j]);
CXMLGen.cpp:      //if(srvParam->skipErrorsSilently==0){
CXMLGen.cpp:    if(srvParam->OGCVersion==WMS_VERSION_1_0_0){
CXMLGen.cpp:      if(srvParam->requestType==REQUEST_WMS_GETCAPABILITIES){
CXMLGen.cpp:    for(size_t p=0;p< srvParam->cfg->Projection.size();p++){
CXMLGen.cpp:      //printf("*** %s = %s\n",srvParam->configReader->Projection_EPSG[p].c_str(), configReader->srvParam->configReader->Projection_Proj4[p].c_str());
CXMLGen.cpp:      const char *szProjection=srvParam->cfg->Projection[p]->attr.id.c_str();
CXMLGen.cpp:      if(srvParam->OGCVersion==WMS_VERSION_1_0_0){
CXMLGen.cpp:        if(srvParam->requestType==REQUEST_WMS_GETCAPABILITIES){
CXMLGen.cpp:          if(p<srvParam->cfg->Projection.size()-1)OGCDoc.concat(" ");
CXMLGen.cpp:      if(srvParam->OGCVersion==WMS_VERSION_1_1_1){
CXMLGen.cpp:        if(srvParam->requestType==REQUEST_WMS_GETCAPABILITIES){
CXMLGen.cpp:      if(srvParam->cfg->Projection[p]->attr.id.equals("EPSG:4326")){
CXMLGen.cpp:    if(srvParam->OGCVersion==WMS_VERSION_1_0_0){
CXMLGen.cpp:      if(srvParam->requestType==REQUEST_WMS_GETCAPABILITIES){
CXMLGen.cpp:    if(srvParam->requestType==REQUEST_WMS_GETCAPABILITIES){
CXMLGen.cpp:    if(srvParam->requestType==REQUEST_WCS_GETCAPABILITIES){
CXMLGen.cpp:        srvParam->cfg->Layer[j]->Name[0]->value.c_str(),
CXMLGen.cpp:        srvParam->cfg->Layer[j]->Name[0]->value.c_str(),
CXMLGen.cpp:        srvParam->cfg->Layer[j]->Title[0]->value.c_str(),
CXMLGen.cpp:    if(srvParam->cfg->Layer[j]->attr.type.equals("database")){
CXMLGen.cpp:      status = DB.connect(srvParam->cfg->DataBase[0]->attr.parameters.c_str());if(status!=0)return 1;
CXMLGen.cpp:        snprintf(szQuery,MAX_STR_LEN,"select max(%s) from %s",dataSource->OGCDimNames[i].c_str(),srvParam->cfg->Layer[j]->DataBaseTable[0]->value.c_str());
CXMLGen.cpp:        snprintf(szQuery,MAX_STR_LEN,"select min(%s) from %s",dataSource->OGCDimNames[i].c_str(),srvParam->cfg->Layer[j]->DataBaseTable[0]->value.c_str());
CXMLGen.cpp:  //    if(srvParam->serviceType==SERVICE_WCS){
CXMLGen.cpp:        snprintf(szQuery,MAX_STR_LEN,"select %s from %s",dataSource->OGCDimNames[i].c_str(),srvParam->cfg->Layer[j]->DataBaseTable[0]->value.c_str());
CXMLGen.cpp:        if(srvParam->requestType==REQUEST_WMS_GETCAPABILITIES){
CXMLGen.cpp:        if(srvParam->requestType==REQUEST_WCS_GETCAPABILITIES){
CXMLGen.cpp:    if(srvParam->requestType==REQUEST_WCS_DESCRIBECOVERAGE){
CXMLGen.cpp:               srvParam->cfg->Layer[j]->Name[0]->value.c_str(),
CXMLGen.cpp:               srvParam->cfg->Layer[j]->Name[0]->value.c_str(),
CXMLGen.cpp:               srvParam->cfg->Layer[j]->Title[0]->value.c_str(),
CXMLGen.cpp:      for(size_t p=0;p< srvParam->cfg->Projection.size();p++){
CXMLGen.cpp:                 srvParam->cfg->Projection[p]->attr.id.c_str(),
CXMLGen.cpp:      for(size_t p=0;p< srvParam->cfg->Projection.size();p++){
CXMLGen.cpp:                 srvParam->cfg->Projection[p]->attr.id.c_str());
CXMLGen.cpp:      for(size_t p=0;p<srvParam->cfg->WCS[0]->WCSFormat.size();p++){
CXMLGen.cpp:                 "      <formats>%s</formats>\n",srvParam->cfg->WCS[0]->WCSFormat[p]->attr.name.c_str());
CXMLGen.cpp:    if(srvParam->requestType==REQUEST_WMS_GETCAPABILITIES){
CXMLGen.cpp:      replace("[NAME]",srvParam->cfg->Layer[j]->Name[0]->value.c_str(),temp);
CXMLGen.cpp:    if(srvParam->requestType==REQUEST_WCS_GETCAPABILITIES){
CXMLGen.cpp:    if(srvParam->requestType==REQUEST_WCS_DESCRIBECOVERAGE){
CXMLGen.cpp:  if(srvParam->requestType==REQUEST_WMS_GETCAPABILITIES){
CXMLGen.cpp:  if(srvParam->requestType==REQUEST_WCS_GETCAPABILITIES){
CXMLGen.cpp:  if(srvParam->requestType==REQUEST_WCS_DESCRIBECOVERAGE){
